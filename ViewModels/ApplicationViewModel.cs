using System.Collections.ObjectModel;
using System.Windows.Input;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Master_Floor_Project.Models;
using Master_Floor_Project.Services;
using Master_Floor_Project.Windows;
using System;
using System.Threading.Tasks;

namespace Master_Floor_Project.ViewModels
{
    public partial class ApplicationViewModel : ViewModelBase
    {
        // –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏
        private readonly IApplicationService _applicationService;

        [ObservableProperty]
        private ObservableCollection<Application> _applications = new(); // –ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        [ObservableProperty]
        private bool _isLoading = true; // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

        [ObservableProperty]
        private Application? _selectedApplication; // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –≤ —Å–ø–∏—Å–∫–µ

        public ICommand CreateApplicationCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        public ICommand RefreshApplicationsCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
        public ICommand EditApplicationCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        public ICommand DeleteApplicationCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏

        public ApplicationViewModel()
        {
            _applicationService = new ApplicationService();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            CreateApplicationCommand = new RelayCommand(() =>
            {
                Console.WriteLine("–ö–Ω–æ–ø–∫–∞ –°–û–ó–î–ê–¢–¨ –ó–ê–Ø–í–ö–£ –Ω–∞–∂–∞—Ç–∞");
                ShowCreateWindow();
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            RefreshApplicationsCommand = new RelayCommand(async () => await LoadApplicationsAsync());

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            EditApplicationCommand = new RelayCommand(() =>
            {
                if (SelectedApplication != null)
                {
                    Console.WriteLine($"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ID: {SelectedApplication.ApplicationId}");
                    ShowEditWindow(SelectedApplication);
                }
                else
                {
                    Console.WriteLine("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                }
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            DeleteApplicationCommand = new RelayCommand(async () =>
            {
                if (SelectedApplication != null)
                {
                    Console.WriteLine($"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ID: {SelectedApplication.ApplicationId}");
                    await DeleteApplicationAsync(SelectedApplication);
                }
                else
                {
                    Console.WriteLine("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
                }
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            _ = LoadApplicationsAsync();
        }

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        private void ShowEditWindow(Application application)
        {
            Console.WriteLine($"–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ {application.ApplicationNumber}");

            // –°–æ–∑–¥–∞–µ–º ViewModel —Å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            var editViewModel = new EditApplicationViewModel(application, onApplicationUpdated: () =>
            {
                // –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
                Console.WriteLine("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");
                _ = LoadApplicationsAsync(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            });

            NavigationService.ShowWindow<EditApplicationWindow, EditApplicationViewModel>(editViewModel);
        }

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        private void ShowCreateWindow()
        {
            Console.WriteLine("–ö–Ω–æ–ø–∫–∞ –°–û–ó–î–ê–¢–¨ –ó–ê–Ø–í–ö–£ –Ω–∞–∂–∞—Ç–∞");

            var createViewModel = new CreateApplicationViewModel();
            createViewModel.OnApplicationCreated += () =>
            {
                // –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
                Console.WriteLine("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...");
                _ = LoadApplicationsAsync(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            };

            NavigationService.ShowWindow<CreateApplicationWindow, CreateApplicationViewModel>(createViewModel);
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        private async Task DeleteApplicationAsync(Application application)
        {
            try
            {
                await _applicationService.DeleteApplicationAsync(application.ApplicationId);
                Console.WriteLine($"–ó–∞—è–≤–∫–∞ {application.ApplicationNumber} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                await LoadApplicationsAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {ex.Message}");
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        private async Task LoadApplicationsAsync()
        {
            try
            {
                IsLoading = true; // –í–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                Applications.Clear(); // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞

                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î
                var applications = await _applicationService.GetApplicationsAsync();
                foreach (var application in applications)
                {
                    Applications.Add(application); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: {ex.Message}");
            }
            finally
            {
                IsLoading = false; // –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            }
        }
    }
}
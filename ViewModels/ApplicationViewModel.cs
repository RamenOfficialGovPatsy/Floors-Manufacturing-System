using System.Collections.ObjectModel;
using System.Windows.Input;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Master_Floor_Project.Models;
using Master_Floor_Project.Services;
using Master_Floor_Project.Windows;
using System;
using System.Threading.Tasks;

namespace Master_Floor_Project.ViewModels
{
    public partial class ApplicationViewModel : ViewModelBase
    {
        private readonly IApplicationService _applicationService;

        [ObservableProperty]
        private ObservableCollection<Application> _applications = new();

        [ObservableProperty]
        private bool _isLoading = true;

        [ObservableProperty]
        private Application? _selectedApplication;

        public ICommand CreateApplicationCommand { get; }
        public ICommand RefreshApplicationsCommand { get; }
        public ICommand EditApplicationCommand { get; }
        public ICommand DeleteApplicationCommand { get; }

        public ApplicationViewModel()
        {
            _applicationService = new ApplicationService();

            CreateApplicationCommand = new RelayCommand(() =>
            {
                Console.WriteLine("–ö–Ω–æ–ø–∫–∞ –°–û–ó–î–ê–¢–¨ –ó–ê–Ø–í–ö–£ –Ω–∞–∂–∞—Ç–∞");
                NavigationService.ShowWindow<CreateApplicationWindow>();
            });

            RefreshApplicationsCommand = new RelayCommand(async () => await LoadApplicationsAsync());

            EditApplicationCommand = new RelayCommand(() =>
            {
                if (SelectedApplication != null)
                {
                    Console.WriteLine($"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ID: {SelectedApplication.ApplicationId}");
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
                    ShowEditWindow(SelectedApplication);
                }
                else
                {
                    Console.WriteLine("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                }
            });

            DeleteApplicationCommand = new RelayCommand(async () =>
            {
                if (SelectedApplication != null)
                {
                    Console.WriteLine($"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ID: {SelectedApplication.ApplicationId}");
                    await DeleteApplicationAsync(SelectedApplication);
                }
                else
                {
                    Console.WriteLine("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
                }
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            _ = LoadApplicationsAsync();
        }

        private void ShowEditWindow(Application application)
        {
            Console.WriteLine($"–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ {application.ApplicationNumber}");

            // ‚úÖ –°–æ–∑–¥–∞–µ–º ViewModel —Å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            var editViewModel = new EditApplicationViewModel(application, onApplicationUpdated: () =>
            {
                // ‚úÖ –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
                Console.WriteLine("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");
                _ = LoadApplicationsAsync(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            });

            NavigationService.ShowWindow<EditApplicationWindow, EditApplicationViewModel>(editViewModel);
        }

        private async Task DeleteApplicationAsync(Application application)
        {
            try
            {
                await _applicationService.DeleteApplicationAsync(application.ApplicationId);
                Console.WriteLine($"–ó–∞—è–≤–∫–∞ {application.ApplicationNumber} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                await LoadApplicationsAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {ex.Message}");
            }
        }

        private async Task LoadApplicationsAsync()
        {
            try
            {
                IsLoading = true;
                Applications.Clear();

                var applications = await _applicationService.GetApplicationsAsync();
                foreach (var application in applications)
                {
                    Applications.Add(application);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: {ex.Message}");
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
}
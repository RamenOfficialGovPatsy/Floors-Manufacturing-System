using System.Collections.ObjectModel;
using System.Linq;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Master_Floor_Project.Models;
using Master_Floor_Project.Services;
using Master_Floor_Project.Windows;
using System;
using Avalonia.Controls;

namespace Master_Floor_Project.ViewModels
{
    public partial class CreateApplicationViewModel : ViewModelBase
    {
        private readonly IDiscountService _discountService; // –°–µ—Ä–≤–∏—Å —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫
        private readonly IPartnerService _partnerService; // –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
        private readonly IProductService _productService; // –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        private readonly IApplicationService _applicationService; // –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏

        [ObservableProperty]
        private decimal _subTotal; // –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—è–≤–∫–∏ –±–µ–∑ —Å–∫–∏–¥–∫–∏

        [ObservableProperty]
        private decimal _discountPercentage; // –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏

        [ObservableProperty]
        private decimal _finalTotal; // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(PartnerValidationError))]
        [NotifyCanExecuteChangedFor(nameof(SaveApplicationCommand))]
        private Partner? _selectedPartner; // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –∑–∞—è–≤–∫–∏

        [ObservableProperty]
        private DateTime _dateCreated = DateTime.Now; // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏

        [ObservableProperty]
        private bool _isLoading = true; // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

        [ObservableProperty]
        private string? _partnerValidationError; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞

        public Window? CurrentWindow { get; set; } // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        public ObservableCollection<Partner> AllPartners { get; set; } = new();

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        public ObservableCollection<Product> AllProducts { get; set; } = new();

        // –ü–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏
        public ObservableCollection<ApplicationItem> Items { get; set; } = new();

        // –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        public event Action? OnApplicationCreated;

        public IRelayCommand SaveApplicationCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        public IRelayCommand AddProductCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        public IRelayCommand CancelCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è

        public CreateApplicationViewModel()
        {
            _discountService = new DiscountService();
            _partnerService = new PartnerService();
            _productService = new ProductService();
            _applicationService = new ApplicationService();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            SaveApplicationCommand = new RelayCommand(() => SaveApplicationToDatabase(), () => CanSaveApplication());
            AddProductCommand = new RelayCommand(() => AddProduct());
            CancelCommand = new RelayCommand(() => Cancel());

            LoadInitialData(); // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        private bool CanSaveApplication()
        {
            ValidatePartner();
            return SelectedPartner != null && Items.Any(); // –ü–∞—Ä—Ç–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω –∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        private void ValidatePartner()
        {
            PartnerValidationError = SelectedPartner == null ? "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞" : null;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        partial void OnSelectedPartnerChanged(Partner? value)
        {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            ValidatePartner();
            SaveApplicationCommand.NotifyCanExecuteChanged(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–∞—Ä—Ç–Ω–µ—Ä—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã)
        private async void LoadInitialData()
        {
            try
            {
                IsLoading = true;
                Console.WriteLine("üü° –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏...");

                // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                var partners = await _partnerService.GetPartnersAsync();
                AllPartners.Clear();
                foreach (var partner in partners)
                {
                    AllPartners.Add(partner);
                }
                Console.WriteLine($"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {AllPartners.Count} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤");

                // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                var products = await _productService.GetProductsAsync();
                AllProducts.Clear();
                foreach (var product in products)
                {
                    AllProducts.Add(product);
                }
                Console.WriteLine($"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {AllProducts.Count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

                Items.Clear(); // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞—è–≤–∫–∏
                Console.WriteLine("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞—è–≤–∫–∏ –æ—á–∏—â–µ–Ω–∞");

                CalculateTotals(); // –†–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—É–º–º
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {ex.Message}");
                Console.WriteLine($"‚ùå StackTrace: {ex.StackTrace}");
            }
            finally
            {
                IsLoading = false;
                Console.WriteLine("üü¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
        }

        // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º –∑–∞—è–≤–∫–∏
        private void CalculateTotals()
        {
            SubTotal = Items.Sum(item => item.Sum); // –°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏
            DiscountPercentage = _discountService.CalculateDiscount(SubTotal); // –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏
            FinalTotal = SubTotal * (1 - DiscountPercentage); // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            SaveApplicationCommand.NotifyCanExecuteChanged();

            Console.WriteLine($"üí∞ –†–∞—Å—á–µ—Ç —Å—É–º–º: SubTotal={SubTotal}, Discount={DiscountPercentage:P0}, Final={FinalTotal}");
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞—è–≤–∫—É
        private void AddProduct()
        {
            Console.WriteLine("‚ûï –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞...");
            ShowProductSelectionWindow();
        }

        // –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        private void Cancel()
        {
            Console.WriteLine("‚ùå –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏...");
            CloseWindow();
        }

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        private void ShowProductSelectionWindow()
        {
            var selectionViewModel = new ProductSelectionViewModel();
            var window = new ProductSelectionWindow
            {
                DataContext = selectionViewModel
            };

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
            selectionViewModel.ProductSelected += (product, quantity) =>
            {
                if (product != null)
                {
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                    AddProductToApplication(product, quantity);
                }
                window.Close();
            };

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞
            selectionViewModel.SelectionCancelled += () =>
            {
                window.Close();
            };

            window.Show();
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–∑–∏—Ü–∏–π –∑–∞—è–≤–∫–∏
        private void AddProductToApplication(Product product, int quantity)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç
            var existingItem = Items.FirstOrDefault(item => item.ProductId == product.ProductId);

            if (existingItem != null)
            {
                // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                existingItem.Quantity += quantity;
                Console.WriteLine($"üì¶ –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.Name} –Ω–∞ {quantity}");
            }
            else
            {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—è–≤–∫–∏
                var newItem = new ApplicationItem
                {
                    ProductId = product.ProductId,
                    Product = product,
                    ProductName = product.Name,
                    Price = product.MinPricePartner ?? 0,
                    Quantity = quantity
                };

                Items.Add(newItem); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                Console.WriteLine($"üÜï –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.Name}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}, —Ü–µ–Ω–∞: {newItem.Price}");
            }

            // –ü–µ—Ä–µ—Å—á–µ—Ç —Å—É–º–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
            CalculateTotals();
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        private async void SaveApplicationToDatabase()
        {
            if (!CanSaveApplication())
            {
                Console.WriteLine("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–∞—Ä—Ç–Ω–µ—Ä –∏–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
                return;
            }

            try
            {
                Console.WriteLine($"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏...");
                Console.WriteLine($"üîç –ü–∞—Ä—Ç–Ω–µ—Ä: {SelectedPartner!.Name} (ID: {SelectedPartner.PartnerId})");
                Console.WriteLine($"üîç –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∑–∞—è–≤–∫–µ: {Items.Count}");

                // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞—è–≤–∫–∏
                var application = new Application
                {
                    PartnerId = SelectedPartner.PartnerId,
                    ManagerId = 1, // ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    DateCreated = DateTime.UtcNow,
                    Status = "–ß–µ—Ä–Ω–æ–≤–∏–∫"
                };

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                await _applicationService.AddApplicationAsync(application, Items.ToList());
                Console.WriteLine($"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {application.ApplicationNumber}");

                OnApplicationCreated?.Invoke(); // –í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                CloseWindow(); // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {ex.Message}");
            }
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
        private void CloseWindow()
        {
            CurrentWindow?.Close();
        }
    }
}
using System;
using System.Collections.ObjectModel;
using System.Linq;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Master_Floor_Project.Models;
using Master_Floor_Project.Services;

namespace Master_Floor_Project.ViewModels
{
    // ViewModel –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
    public partial class ProductSelectionViewModel : ViewModelBase
    {
        // –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        private readonly IProductService _productService;

        [ObservableProperty]
        private ObservableCollection<Product> _allProducts = new(); // –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤

        [ObservableProperty]
        private Product? _selectedProduct; // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–∫–µ

        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(ConfirmCommand))]
        private string _quantityInput = "1"; // –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)

        [ObservableProperty]
        private string _searchText = string.Empty; // –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

        [ObservableProperty]
        private string? _validationError; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        public ObservableCollection<Product> FilteredProducts { get; set; } = new();

        public IRelayCommand ConfirmCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        public IRelayCommand CancelCommand { get; } // –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –æ–∫–Ω–æ–º
        public event Action<Product?, int>? ProductSelected; // –°–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        public event Action? SelectionCancelled; // –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞

        public ProductSelectionViewModel()
        {
            _productService = new ProductService();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            ConfirmCommand = new RelayCommand(() => ConfirmSelection(), () => CanConfirmSelection());
            CancelCommand = new RelayCommand(() => CancelSelection());

            LoadProducts(); // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        private async void LoadProducts()
        {
            try
            {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î
                var products = await _productService.GetProductsAsync();
                AllProducts.Clear();
                FilteredProducts.Clear();

                foreach (var product in products)
                {
                    AllProducts.Add(product); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    FilteredProducts.Add(product);  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                }

                Console.WriteLine($"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {AllProducts.Count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ex.Message}");
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        partial void OnQuantityInputChanged(string value)
        {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–≤–æ–¥
            ValidateQuantity(); // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            ConfirmCommand.NotifyCanExecuteChanged(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        private void ValidateQuantity()
        {
            ValidationError = null; // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ—à–∏–±–∫–∏

            if (string.IsNullOrWhiteSpace(QuantityInput))
            {
                ValidationError = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞";
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            if (!int.TryParse(QuantityInput, out int quantity))
            {
                ValidationError = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ";
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
            if (quantity <= 0)
            {
                ValidationError = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º";
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        private bool CanConfirmSelection()
        {
            return SelectedProduct != null && // –ü—Ä–æ–¥—É–∫—Ç –≤—ã–±—Ä–∞–Ω
                   ValidationError == null && // –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                   !string.IsNullOrWhiteSpace(QuantityInput) && // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—É—Å—Ç–æ–µ
                   int.TryParse(QuantityInput, out int quantity) && // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - —á–∏—Å–ª–æ
                   quantity > 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
        partial void OnSearchTextChanged(string value)
        {
            FilterProducts(); // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª—É
        private void FilterProducts()
        {
            FilteredProducts.Clear(); // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

            var filtered = string.IsNullOrEmpty(SearchText)
                ? AllProducts // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                : AllProducts.Where(p =>
                    (p.Name?.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ?? false) || // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    (p.Article?.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ?? false)); // –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É

            foreach (var product in filtered)
            {
                FilteredProducts.Add(product); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            }
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        private void ConfirmSelection()
        {
            if (CanConfirmSelection() && int.TryParse(QuantityInput, out int quantity) && SelectedProduct != null)
            {
                Console.WriteLine($"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {SelectedProduct.Name}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}");
                ProductSelected?.Invoke(SelectedProduct, quantity);  // –í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            }
        }

        // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        private void CancelSelection()
        {
            Console.WriteLine("‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞");
            SelectionCancelled?.Invoke(); // –í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω—ã
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        partial void OnSelectedProductChanged(Product? value)
        {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            ConfirmCommand.NotifyCanExecuteChanged();
            Console.WriteLine($"üîÑ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {value?.Name}, –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {CanConfirmSelection()}");
        }
    }
}
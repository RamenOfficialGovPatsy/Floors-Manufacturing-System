using Master_Floor_Project.Data;
using Master_Floor_Project.Models;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Diagnostics;
using System;

namespace Master_Floor_Project.Services
{
    public class WarehouseService : IWarehouseService
    {
        // –£–ë–†–ê–õ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —Ç–µ–ø–µ—Ä—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–æ–≤

        public async Task<List<WarehouseItem>> GetWarehouseItemsAsync()
        {
            try
            {
                using var context = new AppDbContext();
                Debug.WriteLine("üü° WarehouseService: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞...");

                var items = await context.Warehouse
                    .Include(w => w.Product)
                    .ToListAsync();

                Debug.WriteLine($"üü¢ WarehouseService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {items.Count} –∑–∞–ø–∏—Å–µ–π —Å–∫–ª–∞–¥–∞");

                for (int i = 0; i < Math.Min(3, items.Count); i++)
                {
                    var item = items[i];
                    Debug.WriteLine($"   - {item.Product?.Name ?? "No Name"}: {item.QuantityOnHand} —à—Ç.");
                }

                return items;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ WarehouseService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {ex.Message}");
                Debug.WriteLine($"üî¥ WarehouseService: Inner: {ex.InnerException?.Message}");
                return new List<WarehouseItem>();
            }
        }
    }
}
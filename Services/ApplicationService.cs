// File: Services/ApplicationService.cs
using Master_Floor_Project.Data;
using Master_Floor_Project.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace Master_Floor_Project.Services
{
    public class ApplicationService : IApplicationService
    {
        public async Task<IEnumerable<Application>> GetApplicationsAsync()
        {
            try
            {
                using var context = new AppDbContext();
                return await context.Applications.Include(a => a.Partner).ToListAsync();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ GetApplicationsAsync Error: {ex.Message}");
                throw;
            }
        }

        public async Task<Application?> GetApplicationByIdAsync(int id)
        {
            try
            {
                using var context = new AppDbContext();
                return await context.Applications
                    .Include(a => a.Partner)
                    .Include(a => a.ApplicationItems)
                        .ThenInclude(ai => ai.Product)
                    .FirstOrDefaultAsync(a => a.ApplicationId == id);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ GetApplicationByIdAsync Error: {ex.Message}");
                throw;
            }
        }

        public async Task AddApplicationAsync(Application application, List<ApplicationItem> items)
        {
            try
            {
                using var context = new AppDbContext();
                using var transaction = await context.Database.BeginTransactionAsync();
                try
                {
                    context.Applications.Add(application);
                    await context.SaveChangesAsync();

                    foreach (var item in items)
                    {
                        item.ApplicationId = application.ApplicationId;
                        context.ApplicationItems.Add(item);
                    }
                    await context.SaveChangesAsync();

                    await transaction.CommitAsync();
                }
                catch (Exception)
                {
                    await transaction.RollbackAsync();
                    throw;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ AddApplicationAsync Error: {ex.Message}");
                throw;
            }
        }

        public async Task UpdateApplicationAsync(Application application)
        {
            try
            {
                using var context = new AppDbContext();

                // ‚úÖ –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
                var existingApplication = await context.Applications
                    .FirstOrDefaultAsync(a => a.ApplicationId == application.ApplicationId);

                if (existingApplication != null)
                {
                    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å, –Ω–µ —Ç—Ä–æ–≥–∞—è –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
                    existingApplication.Status = application.Status;
                    await context.SaveChangesAsync();
                    Console.WriteLine($"üü¢ –ó–∞—è–≤–∫–∞ ID: {application.ApplicationId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {application.Status}");
                }
                else
                {
                    Console.WriteLine($"üî¥ –ó–∞—è–≤–∫–∞ ID: {application.ApplicationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üî¥ UpdateApplicationAsync Error: {ex.Message}");
                Console.WriteLine($"üî¥ Inner Exception: {ex.InnerException?.Message}");
                throw;
            }
        }

        public async Task DeleteApplicationAsync(int applicationId)
        {
            try
            {
                using var context = new AppDbContext();

                // ‚úÖ –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤–º–µ—Å—Ç–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
                var applicationToDelete = await context.Applications
                    .Include(a => a.ApplicationItems) // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    .FirstOrDefaultAsync(a => a.ApplicationId == applicationId);

                if (applicationToDelete != null)
                {
                    Console.WriteLine($"üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞: {applicationToDelete.ApplicationNumber}, –ø–æ–∑–∏—Ü–∏–π: {applicationToDelete.ApplicationItems.Count}");

                    // ‚úÖ EF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–∞—Å–∫–∞–¥–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é
                    context.Applications.Remove(applicationToDelete);
                    await context.SaveChangesAsync();

                    Console.WriteLine($"üü¢ ApplicationService: –ó–∞—è–≤–∫–∞ {applicationToDelete.ApplicationNumber} (ID: {applicationId}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
                }
                else
                {
                    Console.WriteLine($"üü° ApplicationService: –ó–∞—è–≤–∫–∞ {applicationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üî¥ DeleteApplicationAsync Error: {ex.Message}");
                Console.WriteLine($"üî¥ Inner Exception: {ex.InnerException?.Message}");
                Console.WriteLine($"üî¥ StackTrace: {ex.StackTrace}");
                throw;
            }
        }

        public async Task<List<ApplicationItem>> GetApplicationItemsAsync(int applicationId)
        {
            try
            {
                using var context = new AppDbContext();
                Console.WriteLine($"üîç ApplicationService: –ò—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ ID: {applicationId}");

                var items = await context.ApplicationItems
                    .Include(ai => ai.Product)
                    .Where(ai => ai.ApplicationId == applicationId)
                    .ToListAsync();

                Console.WriteLine($"üîç ApplicationService: –ù–∞–π–¥–µ–Ω–æ {items.Count} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ {applicationId}");

                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
                foreach (var item in items)
                {
                    Console.WriteLine($"üîç –ü–æ–∑–∏—Ü–∏—è: ItemId={item.ApplicationItemId}, ProductId={item.ProductId}, Quantity={item.Quantity}");
                    Console.WriteLine($"üîç –ü—Ä–æ–¥—É–∫—Ç: {(item.Product != null ? item.Product.Name : "NULL")}");
                    if (item.Product != null)
                    {
                        Console.WriteLine($"üîç –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {item.Product.MinPricePartner}");
                    }
                }

                return items;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üî¥ GetApplicationItemsAsync Error: {ex.Message}");
                Console.WriteLine($"üî¥ StackTrace: {ex.StackTrace}");
                throw;
            }
        }
    }
}
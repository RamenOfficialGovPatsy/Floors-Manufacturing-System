using Master_Floor_Project.Data;
using Master_Floor_Project.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace Master_Floor_Project.Services
{
    public class ApplicationService : IApplicationService
    {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö
        public async Task<IEnumerable<Application>> GetApplicationsAsync()
        {
            try
            {
                using var context = new AppDbContext();
                return await context.Applications.Include(a => a.Partner).ToListAsync();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ GetApplicationsAsync Error: {ex.Message}");
                throw;
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –∏ –ø–æ–∑–∏—Ü–∏—è—Ö
        public async Task<Application?> GetApplicationByIdAsync(int id)
        {
            try
            {
                using var context = new AppDbContext();
                return await context.Applications
                    .Include(a => a.Partner) // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                    .Include(a => a.ApplicationItems) // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—è–≤–∫–∏
                        .ThenInclude(ai => ai.Product) // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –ø–æ–∑–∏—Ü–∏—è—Ö
                    .FirstOrDefaultAsync(a => a.ApplicationId == id);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ GetApplicationByIdAsync Error: {ex.Message}");
                throw;
            }
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        public async Task AddApplicationAsync(Application application, List<ApplicationItem> items)
        {
            try
            {
                using var context = new AppDbContext();

                // –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                using var transaction = await context.Database.BeginTransactionAsync();
                try
                {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    context.Applications.Add(application);
                    await context.SaveChangesAsync(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ApplicationId

                    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—è–≤–∫–∏
                    foreach (var item in items)
                    {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å –∑–∞—è–≤–∫–æ–π
                        item.ApplicationId = application.ApplicationId;

                        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        var existingProduct = await context.Products.FindAsync(item.ProductId);
                        if (existingProduct != null)
                        {
                            item.Product = existingProduct; // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
                        }

                        context.ApplicationItems.Add(item); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    }
                    await context.SaveChangesAsync(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
                    await transaction.CommitAsync(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                }
                catch (Exception)
                {
                    await transaction.RollbackAsync(); // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    throw;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ AddApplicationAsync Error: {ex.Message}");
                throw;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        public async Task UpdateApplicationAsync(Application application)
        {
            try
            {
                using var context = new AppDbContext();

                // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
                var existingApplication = await context.Applications
                    .FirstOrDefaultAsync(a => a.ApplicationId == application.ApplicationId);

                if (existingApplication != null)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å 
                    existingApplication.Status = application.Status;
                    await context.SaveChangesAsync();
                    Debug.WriteLine($"üü¢ –ó–∞—è–≤–∫–∞ ID: {application.ApplicationId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {application.Status}");
                }
                else
                {
                    Debug.WriteLine($"üî¥ –ó–∞—è–≤–∫–∞ ID: {application.ApplicationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ UpdateApplicationAsync Error: {ex.Message}");
                Debug.WriteLine($"üî¥ Inner Exception: {ex.InnerException?.Message}");
                throw;
            }
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –∑–∞—è–≤–∫–∏
        public async Task DeleteApplicationAsync(int applicationId)
        {
            try
            {
                using var context = new AppDbContext();

                // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤–º–µ—Å—Ç–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
                var applicationToDelete = await context.Applications
                    .Include(a => a.ApplicationItems) // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    .FirstOrDefaultAsync(a => a.ApplicationId == applicationId);

                if (applicationToDelete != null)
                {
                    Debug.WriteLine($"üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞: {applicationToDelete.ApplicationNumber}, –ø–æ–∑–∏—Ü–∏–π: {applicationToDelete.ApplicationItems.Count}");

                    // –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É (–ø–æ–∑–∏—Ü–∏–∏ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
                    context.Applications.Remove(applicationToDelete);
                    await context.SaveChangesAsync();

                    Debug.WriteLine($"üü¢ ApplicationService: –ó–∞—è–≤–∫–∞ {applicationToDelete.ApplicationNumber} (ID: {applicationId}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
                }
                else
                {
                    Debug.WriteLine($"üü° ApplicationService: –ó–∞—è–≤–∫–∞ {applicationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ DeleteApplicationAsync Error: {ex.Message}");
                Debug.WriteLine($"üî¥ Inner Exception: {ex.InnerException?.Message}");
                Debug.WriteLine($"üî¥ StackTrace: {ex.StackTrace}");
                throw;
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞—è–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
        public async Task<List<ApplicationItem>> GetApplicationItemsAsync(int applicationId)
        {
            try
            {
                using var context = new AppDbContext();
                Debug.WriteLine($"üîç ApplicationService: –ò—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ ID: {applicationId}");

                var items = await context.ApplicationItems
                    .Include(ai => ai.Product) // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
                    .Where(ai => ai.ApplicationId == applicationId) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ID –∑–∞—è–≤–∫–∏
                    .ToListAsync();

                Debug.WriteLine($"üîç ApplicationService: –ù–∞–π–¥–µ–Ω–æ {items.Count} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ {applicationId}");

                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
                foreach (var item in items)
                {
                    Debug.WriteLine($"üîç –ü–æ–∑–∏—Ü–∏—è: ItemId={item.ApplicationItemId}, ProductId={item.ProductId}, Quantity={item.Quantity}");
                    Debug.WriteLine($"üîç –ü—Ä–æ–¥—É–∫—Ç: {(item.Product != null ? item.Product.Name : "NULL")}");
                    if (item.Product != null)
                    {
                        Debug.WriteLine($"üîç –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {item.Product.MinPricePartner}");
                    }
                }

                return items;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"üî¥ GetApplicationItemsAsync Error: {ex.Message}");
                Debug.WriteLine($"üî¥ StackTrace: {ex.StackTrace}");
                throw;
            }
        }
    }
}